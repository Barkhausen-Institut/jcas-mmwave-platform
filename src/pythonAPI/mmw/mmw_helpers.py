"""
Helper functions
"""

import numpy as np
import matplotlib.pyplot as plot
import time
from enum import Enum

#from . import mmw_helpers

class generic_helpers():


    def convert_to_list(data):
        "String or tuple of string to list of strings"
        if (type(data)) is str:
            #print(type(data))
            # Convert to list
            tmp = []
            tmp.append(data)
            data = tmp
        elif type(data) is tuple:
            #print(type(data))
            # Convert to list
            tmp = []
            for k in data:
                tmp.append(str(k))
            data = tmp
        elif type(data) is list:
            pass # do nothing just return with the list
            #print(type(data))
        else:
            #print("error")
            return ["error"]
        #print(type(data))
        #print(data)

        return data

class performance():
    perfdata = {}
    #sendtime_ms = (time.perf_counter() - start) * 1000

    def read(self, timername, record = "all"):
        if record == "all":
            # not return "lastrun"
            retstr = ""
            #sorting by value # https://stackoverflow.com/questions/613183/how-do-i-sort-a-dictionary-by-value
            import operator
            #sorted_x = sorted(self.perfdata[timername].items(), key=operator.itemgetter(1)) # sort by values
            sorted_x = sorted(self.perfdata[timername].items(), key=operator.itemgetter(0)) # sort by keys
            for key, value in sorted_x:
                if key not in ["lastrun", "startzero"]:
                    retstr="%s, %s: %.2f ms"%(retstr, key, value)
            return retstr
        else:
            return self.perfdata[timername][record]

    def read_all(self):
        return self.perfdata

    def record_abs(self, timername, recordname):
        "Since Reset. Store  in millisec"
        now = time.perf_counter()
        #if timername == "main": print(self.perfdata[timername]["startzero"])
        self.perfdata[timername][recordname] = (now - self.perfdata[timername]["startzero"]) *1000
        self.perfdata[timername]["lastrun"] = now

    def record_diff(self, timername, recordname):
        "Since previous step. Store  in millisec"
        now = time.perf_counter()
        #if timername == "main": print(self.perfdata[timername]["startzero"])
        self.perfdata[timername][recordname] = (now - self.perfdata[timername]["lastrun"]) *1000
        self.perfdata[timername]["lastrun"] = now

    def reset(self, timername):
        now = time.perf_counter()
        self.perfdata[timername]={}
        self.perfdata[timername]["startzero"] = now
        #if timername == "main": print(self.perfdata[timername]["startzero"])
        self.perfdata[timername]["lastrun"] = now

class waveform_types(Enum):
    """Waveform types that are defined in waveform_helpers() class"""
    cw      = 0
    chirp   = 1

class waveform_datatypes(Enum):
    interleaved_iq  = 0
    real            = 1

class waveform_utilities():
    """Waveform operations, like as conversions"""
    perf = performance()
    def convert_array_type(self, array , to_type=np.int16):
        """Converting ndarray to other format"""
        new = np.array(array, to_type)
        #new = np.array(new, np.int16)
        #print (type(new))
        return new

    def convert_complex_to_reim_arrays(self, cwfm):
        """Returns with Re and Im arrays"""
        re = []
        im= []
        b = cwfm.astype(np.float).view(complex)
        re = np.real(b)
        im = np.imag(b)
        return  re, im

    def convert_real_to_complex(self, time, real):
        a = np.zeros(100, dtype=np.int16)
        b = real.astype(np.float).view(complex)
        return b

    def generate_chirp_v1(self, number_of_samples, span_percetage=80):
        """Generate chirp signal
        Method 1: Instantaneous rel. frequency (N points, rel. freq from -span/200 to span/200):
freq[x] = 2pi * ( -span/200 + x/N * span/100)

Generate IQ from freq[x], using a phase accumulator.

        :param number_of_samples:
        :param span_percetage:
        :return:
        """
        import math
        a = span_percetage / -200 * (2 * math.pi)
        b = span_percetage / 100 / number_of_samples * (2 * math.pi)
        i = 0
        phi_acc = 0
        cosx = list()  # I signal
        sinx = list()  # Q signal
        for s in range(0, number_of_samples):
            phi = a + (b * i)
            sinx.append(math.sin(phi_acc))
            cosx.append(math.cos(phi_acc))
            phi_acc = (phi + phi_acc) % (2 * math.pi)
            i += 1
        return cosx, sinx

    def generate_cw(self, number_of_samples):
        cosx = list()
        sinx = list()
        return cosx, sinx

    def generate_sin_cos_listtype(self, points):
        steps = 0.001
        point = points / 10
        max = points*steps
        time        = np.arange(0, max, steps)
        re   = (np.sin(time))*32767
        im   = np.cos(time)*32767
        re = np.ndarray.tolist(re)
        im = np.ndarray.tolist(im)
        return re, im

    def generate_sinewave_real(self):
        """
        https://pythontic.com/visualization/charts/sinewave
        :return:
        """

        # Get x values of the sine wave
        time = np.arange(0, 10, 0.1);
        # Amplitude of the sine wave is sine of a variable like time
        amplitude = np.sin(time)

        return time, amplitude

    def generate_waveform(self, fs = 3.072e9, signal = waveform_types.cw, datatype = waveform_datatypes.interleaved_iq, length_sec = 80e-6):
        """Generate test signals: CW, Chirp, etc.

        :param fs: Sampling frequency of your instrument. Max is 3.072e9
        :param signal: Signal type (shape): CW or Chirp. Defined in Enum
        :param datatype:
        :param length_sec: Signal burst length
        :return:
        """
        wfm_utils = h.waveform_utilities()
        number_of_samples = fs * length_sec # Hz * sec
        if signal == waveform_types.chirp:
            Isignal, Qsignal = self.generate_chirp_v1(number_of_samples, 80)
        elif signal == waveform_types.cw:
            Isignal, Qsignal =  self.generate_cw(number_of_samples)
        else:
            pass
        if datatype == waveform_datatypes.interleaved_iq:
            #toDo: convert_array_type does not work
            Isignal = wfm_utils.convert_array_type(Isignal, np.int16)
            Qsignal = wfm_utils.convert_array_type(Qsignal, np.int16)
            print(Isignal)
            intleaved = np.empty((Isignal.size + Qsignal.size,), dtype=Isignal.dtype)
            intleaved[0::2] = Isignal
            intleaved[1::2] = Qsignal
            return intleaved
        return list()

    def get_interleaved_np_array(self,points):
        #a = np.array([1, 3, 5])
        #b = np.array([2, 4, 6])
        #re, im = self.static_re_im_int16()
        self.perf.reset("interleaved_gen")
        re, im = self.generate_sin_cos_listtype(points/2)
        self.perf.record_diff("interleaved_gen","01_generate_re_im(%s)"%type(re))

        a = self.convert_array_type(re, np.int16)
        self.perf.record_diff("interleaved_gen","02_conv_re")
        b = self.convert_array_type(im, np.int16)
        self.perf.record_diff("interleaved_gen","03_conv_im")


        #a = np.array(re, np.int16)
        #b = np.array(im, np.int16)
        #print(a.shape)

        c = np.empty((a.size + b.size,), dtype=a.dtype)
        self.perf.record_diff("interleaved_gen","04_create_buffer")

        c[0::2] = a
        c[1::2] = b
        self.perf.record_diff("interleaved_gen","05_interleaving")

        #print(self.perf.read("interleaved_gen"))
        return c

    def get_time(self, dt =0.1, samples=1000):
        start= 0
        #dt = 1 / 10000  # 1/Fs
        stop = start + (dt * samples)
        time = np.arange(start, stop, dt)
        return time

    def get_wfm_attributes(self, wfm):
        #print("--- type : %s"%type(wfm))
        #print("--- dtype: %s"%str(wfm.dtype))
        # if np.iscomplex(wfm): print("--- real/complex: complex")
        # elif np.isreal(wfm): print("--- real/complex: real")
        # else: print("--- real/complex: neither")
        attribs = {"type": type(wfm), "dtype": wfm.dtype, "length": len(wfm)}
        return attribs

    def plot_complex(self, time, cwfm, title="Complex Wfm"):
        pass

    def plot_interlaved_iq(self, y,title="Plot_interleaved_IQ"):
        """Plot inteleaved data on subplots"""
        #print(type(y), type(y.shape), y.shape[0])

        #y1, y2 = y[:][0], y
        #y1 = np.frombuffer(y[:][0],dtype=np.ndarray)
        y1, y2 = y[:][0::2], y[:][1::2] # Split interleaved ndarray into 2 separate arrays
        len2=min(len(y1),len(y2))-10
        y1 = y1[0:len2]
        y2 = y2[0:len2]

        print(len(y1),len(y2))
        #y1 = np.reshape
        #print(type(y1),y1.shape)
        #print(type(y2), y2.shape)
        #print(type(y1), type(y1.shape), y1.shape)
        self.plot_re_im(y1,y2, title)

    def plot_re_im(self, y1, y2, title="Re_Im Waveforms"):
        import matplotlib.pyplot as plt
        x1 = self.get_time(0.1, y1.shape[0])
        x2 = self.get_time(0.1, y2.shape[0])
        #print(shape(y1), shape(y2))
        plot.subplot(2, 1, 1)
        plot.plot(x1, y1, 'yo-')
        plot.title(title)
        plot.ylabel('I Baseband')

        plot.subplot(2, 1, 2)
        plot.plot(x2, y2, 'r.-')
        plot.xlabel('time (samples)')
        plot.ylabel('Q Baseband')
        plot.draw()  # non-blocking
        #lot.show()


        return 0

    def plot_real(self, time, amplitude, title="Waveform"):

        # Plot a sine wave using time and amplitude obtained for the sine wave
        plot.plot(time, amplitude)
        # Give a title for the sine wave plot
        plot.title(title)
        # Give x axis label for the sine wave plot
        plot.xlabel('Time')
        # Give y axis label for the sine wave plot
        plot.ylabel('Amplitude = sin(time)')
        plot.grid(True, which='both')
        plot.axhline(y=0, color='k')

        # Display the sine wave
        #plot.plot([1,2,3])
        plot.draw() # non-blocking

        #plot.show() # blocking
        return 0

    def print_wfm_attributes(self, wfm):
        attribs = self.get_wfm_attributes(wfm)
        print("--- type : %s"%attribs["type"])
        print("--- dtype: %s"%attribs["dtype"])
        print("--- length: %s" % attribs["length"])
        # if np.iscomplex(wfm): print("--- real/complex: complex")
        # elif np.isreal(wfm): print("--- real/complex: real")
        # else: print("--- real/complex: neither")
        return attribs

    def simple_subplots(self):

        x1 = np.linspace(0.0, 5.0)
        x2 = np.linspace(0.0, 2.0)

        y1 = np.cos(2 * np.pi * x1) * np.exp(-x1)
        y2 = np.cos(2 * np.pi * x2)

        plot.subplot(2, 1, 1)
        plot.plot(x1, y1, 'yo-')
        plot.title('A tale of 2 subplots')
        plot.ylabel('Damped oscillation')

        plot.subplot(2, 1, 2)
        plot.plot(x2, y2, 'r.-')
        plot.xlabel('time (s)')
        plot.ylabel('Undamped')

        plot.show()

    def show(self):
        plot.show()

    def static_re_im_int16(self):
        re=[-721, 185, 5, 1299, 1252, 1828, 1150, 1391, 916, 1295, 2920, 1577, 2193, 1870, 2724, 2630, 3536, 4160, 2733, 4025, 3583, 4118, 4393, 3714, 4332, 4965, 4622, 5010, 5166, 5367, 5055, 6307, 6387, 7333, 7021, 6544, 6565, 7458, 8297, 7913, 8868, 8414, 8839, 8971, 7786, 9334, 8457, 10192, 8956, 8782, 9843, 10958, 10232, 11000, 11381, 9840, 10633, 11178, 10834, 11698, 12189, 11598, 11834, 13229, 11608, 13314, 12962, 13837, 13538, 12703, 14020, 13755, 14077, 14684, 15007, 15235, 14772, 15539, 15770, 14387, 14517, 15538, 15651, 16659, 15800, 16354, 16446, 15914, 15861, 17063, 17874, 17346, 17119, 17397, 17671, 18283, 17152, 17552, 18125, 19256, 18596, 18149, 18763, 19227, 19318, 19466, 18826, 19721, 19980, 20433, 20865, 20254, 20043, 21182, 20235, 20857, 21774, 20583, 21867, 22373, 21480, 22548, 21781, 23116, 23328, 22707, 22220, 23438, 22330, 22220, 22418, 22503, 23918, 23091, 23183, 24750, 24097, 23471, 23617, 23760, 23882, 25529, 23862, 24813, 25759, 24631, 24672, 26047, 26342, 25599, 26060, 25760, 26096, 26797, 27194, 26126, 26497, 27509, 27085, 27280, 27208, 27276, 26652, 26851, 26704, 26525, 28227, 28062, 28188, 26919, 28108, 28955, 27591, 28046, 29188, 27434, 28474, 29490, 28357, 28737, 28443, 28430, 29329, 28797, 28512, 28415, 29078, 29050, 28510, 29129, 30035, 28838, 28815, 29909, 30096, 30517, 30504, 30490, 30476, 30858, 30081, 30555, 30242, 30212, 30596, 29790, 30043, 31625, 30545, 30650, 31065, 31450, 31620, 30841, 31459, 31899, 30768, 31511, 30841, 30941, 31151, 30953, 30411, 31217, 32323, 30647, 31874, 31634, 31605, 31553, 31803, 30931, 32294, 32594, 32370, 31157, 31641, 32046, 31914, 32258, 32593, 31310, 32157, 31792, 31645, 31272, 30921, 30884, 32434, 31666, 31023, 30975, 31652, 31293, 32766, 32767, 31913, 30859, 32068, 31265, 32092, 31340, 31639, 32395, 31763, 30864, 31809, 31370, 31738, 31044, 32526, 30944, 30866, 31985, 31481, 31794, 31534, 32086, 31415, 31150, 30572, 32171, 30266, 31687, 31584, 30404, 31957, 30071, 30313, 30222, 31569, 30250, 30169, 30141, 30562, 30081, 31198, 30158, 29453, 30444, 30877, 31187, 29836, 30215, 30803, 30113, 30580, 29236, 30290, 29194, 29356, 29408, 29158, 29858, 28690, 28995, 28965, 29625, 28712, 28446, 29196, 28744, 29224, 28046, 27817, 28782, 28830, 28492, 27918, 28513, 28266, 27248, 28206, 27293, 27091, 27957, 27549, 27953, 28063, 26698, 27120, 26118, 27616, 26810, 26251, 25844, 26142, 25527, 25437, 26707, 25222, 24845, 26347, 24776, 25871, 25008, 25651, 24553, 23832, 24696, 23612, 24231, 24816, 24604, 23718, 24488, 24048, 22813, 23635, 22703, 23757, 23767, 23263, 23215, 23541, 23302, 21776, 21303, 22987, 21925, 21689, 21196, 21060, 20916, 20345, 20302, 21821, 20384, 20216, 20911, 19594, 19876, 20010, 20620, 19891, 18816, 20210, 18825, 19349, 18779, 19131, 18150, 17601, 17415, 18078, 18147, 18136, 18343, 17402, 16605, 17196, 17373, 16586, 16993, 15709, 17092, 17014, 15366, 15373, 16092, 15005, 15209, 15887, 14396, 14798, 14483, 13952, 13877, 13033, 13865, 13595, 13060, 12280, 13402, 12817, 11899, 13356, 12439, 12147, 11367, 11043, 11187, 10452, 11883, 10012, 11221, 10458, 10077, 9569, 10411, 9601, 8760, 9934, 9495, 9205, 8990, 8361, 8647, 8128, 7381, 8068, 8458, 8417, 6875, 6656, 6426, 6734, 5669, 6318, 6635, 5936, 6068, 6045, 5501, 4941, 5576, 4115, 3967, 4132, 4030, 4398, 2901, 3547, 2668, 4063, 3576, 3302, 2082, 1617, 2179, 2881, 2734, 1978, 1605, 1387, 1630, 1228, 1207, 292, 229, -238, -1047, -558, -1149, -1687, -788, -1480, -2203, -1879, -1573, -2397, -1733, -3040, -3508, -2174, -2729, -3887, -2636, -4232, -3743, -3589, -4339, -3962, -4819, -4553, -5445, -5566, -4916, -4888, -5834, -6020, -6956, -5971, -6040, -7539, -7487, -6657, -7047, -7509, -6849, -7768, -8798, -9026, -7564, -7847, -8081, -9512, -9365, -9873, -8777, -9085, -9596, -9497, -10116, -11302, -11248, -10590, -11168, -12166, -11838, -11812, -12074, -11932, -12039, -12431, -12380, -13362, -12572, -13030, -13944, -12709, -14180, -13136, -14981, -14005, -13560, -15291, -14260, -15828, -16013, -14802, -16464, -15983, -15861, -15747, -16328, -16328, -15951, -17672, -17376, -18016, -16775, -17272, -17204, -18618, -18449, -18116, -17299, -19027, -18630, -19550, -19252, -19492, -19712, -18999, -18669, -19303, -20212, -20698, -19489, -19669, -19704, -19824, -20825, -20933, -21483, -21584, -21771, -22183, -22001, -21950, -21444, -22102, -21908, -22364, -23266, -22572, -23691, -23661, -22801, -23390, -22777, -23124, -24321, -23197, -24865, -24238, -24747, -24024, -24224, -25089, -24240, -25197, -24204, -24871, -24200, -26210, -25840, -25201, -25646, -26588, -25588, -26710, -25991, -25636, -25863, -27118, -26625, -26493, -26768, -27317, -27068, -26992, -26475, -28122, -27218, -26649, -27285, -28634, -27297, -28428, -28610, -27514, -28277, -29017, -28334, -27612, -29341, -28424, -27801, -28863, -29019, -28934, -29082, -29173, -28859, -30269, -29903, -28838, -29130, -30532, -30498, -29393, -30329, -29974, -30767, -29417, -30655, -30030, -30190, -30117, -30025, -30855, -29602, -29799, -31110, -31325, -30058, -31445, -31162, -30100, -31758, -30599, -30248, -31126, -31330, -30262, -31744, -30255, -30910, -31895, -30677, -30840, -31699, -31787, -31152, -31397, -31791, -31665, -31418, -30996, -32469, -32079, -31698, -31353, -31600, -31605, -31520, -31074, -31891, -31372, -31538, -31499, -31212, -31171, -31573, -31899, -32309, -31598, -32472, -31287, -32739, -30989, -31755, -32010, -32667, -31269, -32202, -31505, -31969, -32272, -31168, -32088, -32179, -32556, -30803, -31114, -30801, -31749, -32106, -31609, -31953, -32053, -31366, -32393, -31146, -32024, -30477, -30630, -31100, -31042, -31890, -31755, -30528, -31052, -30223, -31445, -31332, -30296, -31647, -29969, -30497, -29991, -30642, -30115, -30245, -30599, -30673, -30989, -30088, -30877, -30902, -30462, -30736, -29264, -29980, -29126, -28973, -28844, -30129, -30000, -30433, -29987, -28845, -30134, -29717, -28509, -30023, -29473, -29749, -29706, -28066, -28230, -28949, -28876, -29113, -27829, -27562, -28976, -27340, -27541, -28002, -27915, -27232, -27921, -27603, -27667, -26622, -27257, -26928, -26719, -26477, -26842, -26895, -27168, -25921, -26572, -25940, -25688, -25721, -26413, -25325, -25433, -25971, -24354, -24695, -25002, -25477, -24324, -25125, -24041, -24863, -23606, -25077, -24659, -23532, -23475, -23763, -22887, -23271, -23096, -24026, -23156, -23041, -23424, -22659, -23018, -22679, -21589, -22466, -21608, -21115, -21607, -22018, -21326, -20317, -20073, -20314, -20719, -20053, -21194, -19948, -19185, -19534, -19615, -19884, -19216, -19679, -18260, -19665, -18510, -17960, -18221, -18048, -17789, -17407, -18485, -16711, -16633, -16532, -16922, -17300, -15791, -17526, -16130, -17164, -15082, -16246, -16498, -15204, -16217, -15874, -15134, -14772, -14607, -15190, -15095, -13592, -14559, -13930, -13885, -14040, -12291, -13327, -12890, -12392, -12886, -11647, -11154, -11340, -11068, -11489, -11663, -10520, -10076, -10009, -11059, -10059, -10521, -9879, -10806, -8802, -9844, -9133, -8682, -8621, -8418, -9029, -8012, -7967, -7993, -8563, -7260, -7007, -6708, -7186, -6683, -5737, -5571, -6439, -6307, -6725, -5264, -5727, -5164, -5803, -5274, -5248, -3502, -4763, -4047, -4763, -3484, -3754, -3266, -3708, -2262, -3235, -2390, -1657, -2719, -984, -2466, -1271, -1183, -1322, -970, -1236, 287, 425]
        im=[32206, 31736, 31163, 31828, 31266, 32411, 31473, 32154, 32127, 32275, 31133, 31931, 30868, 32016, 32503, 30849, 32532, 31350, 31792, 31416, 31467, 32042, 31619, 32420, 31656, 31278, 32102, 30754, 30544, 30555, 31411, 31657, 30339, 31977, 30511, 31140, 31672, 30835, 30092, 30139, 30809, 31740, 30645, 30647, 31290, 30907, 30003, 30551, 30321, 29837, 30271, 31138, 30972, 29680, 30655, 29278, 29398, 30072, 29918, 29993, 28908, 28643, 29993, 30294, 29696, 29610, 29292, 29546, 28276, 29058, 28142, 28355, 27761, 28851, 29160, 28506, 28835, 27267, 28868, 27674, 27497, 27091, 26874, 26705, 26678, 26516, 27468, 27345, 27261, 27912, 26244, 25939, 26077, 27322, 27111, 25976, 26368, 26169, 25394, 25586, 25026, 26042, 24957, 25358, 25907, 24746, 25031, 25653, 24068, 24567, 25037, 24299, 24992, 25033, 24022, 23896, 23107, 24161, 23706, 22862, 23195, 22939, 23352, 22601, 23537, 22785, 21770, 22786, 21516, 21558, 21994, 21063, 21263, 21568, 21744, 21211, 20617, 21456, 20834, 21078, 19442, 19963, 20470, 19800, 19347, 18576, 19354, 19454, 18095, 19278, 18169, 18939, 18121, 18728, 17297, 17175, 18686, 17143, 17277, 18108, 16563, 17834, 16003, 15813, 17340, 16328, 15823, 14948, 15368, 15237, 14385, 15697, 15464, 14645, 13882, 14987, 14136, 13579, 14271, 13917, 12613, 12476, 14011, 12753, 12679, 13289, 12857, 12779, 11331, 12407, 11832, 12086, 10628, 11802, 11619, 11337, 11196, 10839, 10448, 9366, 10469, 8906, 9479, 10239, 9938, 9451, 8576, 8619, 8670, 8899, 8563, 6852, 8336, 7228, 7775, 7851, 6632, 6993, 7176, 6224, 5204, 6102, 6538, 5379, 4576, 4424, 5683, 5096, 4779, 3862, 4746, 4635, 3946, 2759, 4067, 2769, 3589, 2723, 2011, 1228, 2162, 2061, 2014, 1324, 576, 1477, 36, 1375, 708, -57, -444, -1081, 395, -1503, -1027, -950, -322, -2062, -2384, -1192, -1098, -2954, -2521, -2594, -1832, -2173, -3928, -3766, -3337, -4530, -4115, -3639, -4943, -4027, -4498, -4487, -5392, -5801, -6323, -6380, -6594, -6619, -6160, -6409, -6773, -6383, -7390, -7300, -6971, -7161, -8163, -8650, -8324, -7910, -7772, -8293, -8835, -8714, -9066, -8842, -10032, -10573, -9725, -10693, -10775, -10885, -10316, -10437, -12214, -11789, -12401, -11347, -12879, -11523, -12142, -13255, -12652, -12540, -14133, -13859, -14304, -13077, -14684, -14376, -14553, -13984, -15322, -15324, -14401, -15540, -16064, -16045, -16365, -16067, -16649, -16806, -16371, -15942, -15910, -17805, -17954, -18192, -18177, -17411, -17425, -18421, -19037, -19051, -19274, -17650, -18262, -18814, -18787, -20038, -19595, -18644, -20150, -20643, -19773, -20723, -19370, -21158, -19908, -20197, -21622, -20633, -21856, -21022, -21724, -21083, -22483, -22672, -21454, -21734, -21676, -21995, -22060, -23383, -23708, -22524, -22716, -22966, -22741, -23654, -23907, -23865, -23172, -25029, -23868, -23575, -23706, -24792, -24771, -24366, -24635, -25635, -25499, -24652, -25135, -25861, -25224, -26605, -26345, -25475, -26016, -25673, -26195, -26433, -27597, -27753, -26347, -26477, -26851, -27480, -28232, -26877, -28221, -27651, -28357, -28736, -27418, -28877, -28444, -29044, -27586, -27732, -28186, -28070, -28690, -27827, -28531, -29669, -28717, -29564, -29518, -29812, -30040, -29341, -29690, -30157, -28862, -28783, -29404, -30177, -29550, -30671, -30647, -29981, -30377, -29687, -30499, -30917, -29774, -30286, -30764, -30683, -31550, -30302, -31186, -31085, -31307, -30031, -31020, -30416, -31024, -31648, -31025, -31810, -31227, -31851, -30981, -30940, -30530, -30979, -31965, -32233, -32119, -32348, -32231, -32449, -31380, -32347, -30821, -31320, -30979, -31187, -32699, -32191, -31177, -31940, -31172, -32527, -32659, -31189, -31940, -31937, -32088, -32245, -32044, -31557, -31393, -31450, -31720, -32731, -31626, -31843, -31469, -31333, -32032, -31076, -31658, -31857, -31349, -32478, -32432, -32494, -31670, -31306, -30914, -32444, -31296, -32398, -32020, -32087, -31427, -31501, -31618, -31143, -30771, -30865, -32095, -30794, -30832, -30903, -31282, -31349, -31639, -30564, -30080, -30640, -31806, -29914, -30696, -31155, -30407, -31054, -30493, -30765, -31151, -31030, -30015, -29433, -29272, -29262, -29690, -29732, -29473, -30619, -29717, -29055, -30518, -29136, -28805, -29909, -28616, -30156, -29297, -28641, -29692, -28818, -29428, -29369, -29500, -28546, -27893, -28407, -28196, -28176, -28584, -28125, -27320, -28668, -27227, -28301, -27135, -27781, -27692, -27625, -27252, -26381, -27274, -26389, -27168, -26076, -26896, -25630, -25959, -26185, -25785, -25255, -25975, -25986, -26105, -24840, -24929, -24686, -24487, -24554, -25112, -24668, -24961, -23905, -24767, -23920, -23418, -24571, -23325, -23063, -22619, -23506, -22642, -23271, -22455, -23404, -22113, -22032, -23154, -23134, -23067, -22557, -22310, -20950, -21398, -21615, -20682, -21861, -21846, -20815, -21210, -20106, -20686, -20973, -20086, -19588, -20533, -20141, -18834, -19809, -18279, -19565, -18127, -18353, -18714, -18353, -18036, -17838, -18674, -17510, -16628, -17053, -16993, -16566, -16642, -16830, -16164, -17091, -17001, -16421, -15455, -16472, -15395, -14934, -14340, -14404, -15030, -14132, -13966, -14827, -14104, -14179, -13481, -12982, -12966, -12362, -12513, -12151, -11658, -12819, -12189, -12320, -11192, -11396, -11951, -10355, -10843, -9895, -10879, -9515, -9411, -10886, -9022, -9803, -8717, -9182, -9013, -9850, -8339, -8799, -8896, -7498, -7875, -6835, -7638, -6652, -7456, -7173, -5886, -5782, -5693, -5549, -6712, -5606, -6248, -5207, -5395, -5384, -4090, -4913, -4765, -3439, -3118, -3609, -4546, -4246, -4068, -2328, -2487, -3339, -2344, -2274, -2308, -1861, -1821, -1108, -1655, -784, -405, -1207, -115, 441, 51, -232, 1196, 178, 467, 1695, 795, 940, 1444, 1368, 2394, 2551, 2800, 3013, 3766, 2907, 3632, 3402, 3007, 4729, 4411, 4391, 4205, 5507, 4638, 5690, 4462, 5283, 6394, 6208, 6285, 5717, 7301, 5838, 7047, 6858, 7803, 7569, 6971, 6783, 7195, 8290, 8845, 8044, 8410, 9237, 8748, 9477, 9646, 8752, 9176, 10027, 10479, 9841, 10713, 11538, 10517, 10820, 10700, 11872, 10951, 12178, 12567, 13151, 12318, 12635, 13792, 12172, 12669, 14299, 14411, 14296, 14613, 14854, 14589, 15098, 13727, 14255, 14859, 15987, 16159, 16002, 15212, 16811, 16467, 17040, 16920, 16879, 17692, 17401, 17782, 17198, 17813, 17981, 18530, 18509, 17239, 19103, 17946, 18130, 18591, 18859, 18133, 18773, 19995, 19252, 19865, 19085, 20295, 20905, 19399, 19930, 21520, 20315, 21253, 21839, 22129, 21233, 21923, 21812, 22732, 21157, 22220, 22621, 23066, 22660, 22240, 23025, 22762, 22130, 23235, 22703, 24020, 24040, 23359, 24639, 23684, 24657, 24363, 25079, 24780, 24903, 25319, 24787, 25014, 24327, 25129, 25903, 25352, 24923, 25729, 26020, 25858, 25563, 26641, 26888, 26154, 27140, 27150, 26101, 27551, 26034, 26838, 26715, 27904, 27960, 27137, 27769, 28630, 26949, 28622, 28014, 29067, 29114, 27541, 28485, 28449, 27597, 29311, 28721, 29132, 29293, 29602, 28518, 28818, 28784, 29557, 30111, 29615, 29962, 29076, 30485, 29978, 30013, 29555, 29026, 29149, 30935, 29340, 31188, 29495, 30012, 29772, 30554, 31312, 31105, 30274, 31001, 31330, 29973, 31369, 30043, 30161, 31143, 30517, 31439, 31586, 30770, 31213, 32183, 30429, 31783, 32146, 30856, 32211, 31462, 31126, 30923, 31752, 30996, 32303, 31028, 31888, 32214, 30740, 30809, 31560, 30911, 32359, 31543, 32555, 32662, 31278, 30962, 32557, 32721, 32582, 31218, 32231, 31844]
        type(re)
        return re,im



